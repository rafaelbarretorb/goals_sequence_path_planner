#!/usr/bin/env python

from goals_sequence_path_planner.srv import *
import rospy
from tf.transformations import quaternion_from_euler
from geometry_msgs.msg import Pose, Point, PoseArray
from std_msgs.msg import Int16MultiArray
import math

from nav_msgs.msg import OccupancyGrid

from tf.transformations import euler_from_quaternion

from goals_sequence_path_planner import SequenceOfGoalsPlanner

from goals_sequence_path_planner.msg import PathArray, Node

class SeqGoalsPlannerServer:
    def __init__(self):
        self.global_costmap = None
        rospy.Subscriber('/move_base/global_costmap/costmap', OccupancyGrid, self.global_costmap_cb)

        self.seq_goals_planner_service = rospy.Service("seq_of_goals_path_planner", SeqGoalsPathPlanner, self.planner_cb)

    def planner_cb(self, req):
        start_pose = [req.start_point.x.data, req.start_point.y.data, req.start_point.yaw.data]
        rospy.loginfo(
            "Start Pose: ( x , y, yaw) = ( %f , %f , %f )" % (
                start_pose[0], start_pose[1], math.degrees(start_pose[2])))
    
        final_pose = [req.final_point.x.data,
                      req.final_point.y.data,
                      req.final_point.yaw.data,
                      req.final_point.optimize.data]

        rospy.loginfo(
            "Final Pose: ( x , y, yaw) = ( %f , %f , %f )" % (
                final_pose[0], final_pose[1], math.degrees(final_pose[2])))

        rospy.loginfo("Goal Points: ")
        goals_list = list()
        for i in range(len(req.sequence_of_goals.nodes)):
            goals_list.append([req.sequence_of_goals.nodes[i].x.data,
                               req.sequence_of_goals.nodes[i].y.data,
                               req.sequence_of_goals.nodes[i].yaw.data,
                               req.sequence_of_goals.nodes[i].optimize.data])

            rospy.loginfo(
                 "Goal %d: ( x , y, yaw) = ( %f , %f , %f )" % (
                     i, goals_list[i][0], goals_list[i][1], math.degrees(goals_list[i][2])))

        min_num_nodes = 1000
        max_num_nodes = 1500
        goal_tolerance = 0.2
        epsilon = 0.5
        optimization_radius = 1.0
        obs_resolution = 0.05
        biasing_radius = 1.0
        biasing_ratio = 20
        x_dim = 15.0
        y_dim = 15.0

        planner = SequenceOfGoalsPlanner(start_pose=start_pose,
                                         final_pose=final_pose,
                                         goals_list=goals_list,
                                         global_map=self.global_costmap,
                                         min_num_nodes=min_num_nodes,
                                         max_num_nodes=max_num_nodes,
                                         goal_tolerance=goal_tolerance,
                                         epsilon=epsilon,
                                         optimization_radius=optimization_radius,
                                         obs_resolution=obs_resolution,
                                         biasing_radius=biasing_radius,
                                         biasing_ratio=biasing_ratio,
                                         x_dim=x_dim,
                                         y_dim=y_dim)

        paths = planner.get_optimized_paths()

        result = PathArray()

        for path in paths:
            p = PoseArray()
            for i in range(len(path)):
                p.poses.append(self.pose_2d_to_ros_pose(path[i]))

            result.paths.append(p)

        return result

    def pose_2d_to_ros_pose(self, my_pose):
        """ """

        pose = Pose()
        pose.position.x = my_pose[0]
        pose.position.y = my_pose[1]
        pose.position.z = 0.0

        if len(my_pose) == 3:
            quat = quaternion_from_euler(0.0, 0.0, my_pose[2])
        else:
            quat = quaternion_from_euler(0.0, 0.0, 0.0)

        pose.orientation.x = quat[0]
        pose.orientation.y = quat[1]
        pose.orientation.z = quat[2]
        pose.orientation.w = quat[3]

        return pose

    def global_costmap_cb(self, msg):
        self.global_costmap = msg


if __name__ == '__main__':
    rospy.init_node('seq_path_planner_server')
    SeqGoalsPlannerServer()
    rospy.spin()
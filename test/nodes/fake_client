#!/usr/bin/env python

import rospy

import math

PI = math.pi

from goals_sequence_path_planner.srv import SeqGoalsPathPlanner
from goals_sequence_path_planner.srv import SeqGoalsPathPlannerRequest
from goals_sequence_path_planner.msg import Node, NodeArray, PathArray

from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point

class FakeClient():
	def __init__(self):
		self.path_markers_initialized = False

		rate = rospy.Rate(10)

		self.path_marker_pub = rospy.Publisher('path_marker', Marker)
		# Goals
		G1 = [0.5, 2.0, PI, True]
		G2 = [6.0, 0.0, PI/2, True]
		G3 = [4.6, -3.5, PI, True]
		G4 = [-1.5, -3.5, PI, True]

		# TEST 1
		#goals_list = [G1, G2, G3, G4]
		goals_list = [G2]
		start_pose = [0, 0, PI, True]
		final_pose = [0, 0, -PI, True]


		# Service Request
		rospy.wait_for_service('seq_of_goals_path_planner')
		response = rospy.ServiceProxy('seq_of_goals_path_planner', SeqGoalsPathPlanner)

		request = SeqGoalsPathPlannerRequest()

		request.start_point = Node()
		request.start_point.x.data = start_pose[0]
		request.start_point.y.data = start_pose[1]
		request.start_point.yaw.data = start_pose[2]
		request.start_point.optimize.data = start_pose[3]

		request.final_point = Node()
		request.final_point.x.data = final_pose[0]
		request.final_point.y.data = final_pose[1]
		request.final_point.yaw.data = final_pose[2]
		request.final_point.optimize.data = final_pose[3]

		request.sequence_of_goals = NodeArray()
		for goal in goals_list:
			node = Node()
			node.x.data = goal[0]
			node.y.data = goal[1]
			node.yaw.data = goal[2]
			node.optimize.data = goal[3]

			request.sequence_of_goals.nodes.append(node)

		result = response(request)

		points = list()

		for i in range(len(result.paths.paths)):
			for j in range(len(result.paths.paths[i].poses)):
				point = Point()
				point.x = result.paths.paths[i].poses[j].position.x
				point.y = result.paths.paths[i].poses[j].position.y
				points.append(point)

		while not rospy.is_shutdown():
			self.path_markers(points)
			rate.sleep()

	def test(self):
		pass

	def path_markers(self, points_list):
		if not self.path_markers_initialized:
			self.path_markers_initialized = True
			self.path_marker = Marker()
			self.path_marker.header.frame_id = "map"
			self.path_marker.type = self.path_marker.LINE_STRIP
			self.path_marker.action = self.path_marker.ADD
			self.path_marker.scale.x = 0.1
			self.path_marker.scale.y = 0.1
			self.path_marker.scale.z = 0.1
			self.path_marker.color.a = 1.0
			self.path_marker.color.r = 0.0
			self.path_marker.color.g = 1.0
			self.path_marker.color.b = 0.0
			self.path_marker.pose.orientation.w = 1.0
			self.path_marker.lifetime = rospy.Duration.from_sec(0)
			self.path_marker.id = 0
			self.path_marker.points = points_list

		self.path_marker_pub.publish(self.path_marker)


if __name__ == '__main__':
    rospy.init_node('test_path_planning')
    FakeClient()
    rospy.spin()